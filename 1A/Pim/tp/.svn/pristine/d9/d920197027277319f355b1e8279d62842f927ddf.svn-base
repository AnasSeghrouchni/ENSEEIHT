-- Définition de structures de données associatives sous forme d'une table de hachage
-- (TH).
generic
	type T_Cle is private;
	type T_Donnee is private;

package TH is

	type T_TH is limited private;

	-- Initialiser une TH.  La TH est vide.
	procedure Initialiser(T: out T_TH) with
		Post => Est_Vide (T);


	-- Est-ce qu'une TH est vide ?
	function Est_Vide (T : T_TH) return Boolean;


	-- Obtenir le nombre d'éléments d'une TH.
	function Taille (T : in T_TH) return Integer with
		Post => Taille'Result >= 0
			and (Taille'Result = 0) = Est_Vide (T);


	-- Enregistrer une Donnée associée à une Clé dans une TH.
	-- Si la clé est déjà présente dans la TH, sa donnée est changée.
	procedure Enregistrer (T : in out T_TH ; Cle : in T_Cle ; Donnee : in T_Donnee) with
		Post => Cle_Presente (T, Cle) and (La_Donnee (T, Cle) = Donnee)   -- donnée insérée
				and (not (Cle_Presente (T, Cle)'Old) or Taille (T) = Taille (T)'Old)
				and (Cle_Presente (T, Cle)'Old or Taille (T) = Taille (T)'Old + 1);

	-- Supprimer la Donnée associée à une Clé dans une .
	-- Exception : Cle_Absente_Exception si Clé n'est pas utilisée dans la TH
	procedure Supprimer (T : in out T_TH ; Cle : in T_Cle) with
		Post =>  Taille (T) = Taille (T)'Old - 1 -- un élément de moins
			and not Cle_Presente (Sda, Cle);         -- la clé a été supprimée


	-- Savoir si une Clé est présente dans une Sda.
	function Cle_Presente (T : in T_RH ; Cle : in T_Cle) return Boolean;


	-- Obtenir la donnée associée à une Cle dans la TH.
	-- Exception : Cle_Absente_Exception si Clé n'est pas utilisée dans la TH
	function La_Donnee (T : in T_TH ; Cle : in T_Cle) return T_Donnee;


	-- Supprimer tous les éléments d'une TH.
	procedure Vider (T : in out T_LCA) with
		Post => Est_Vide (Sda);


	-- Appliquer un traitement (Traiter) pour chaque couple d'une TH.
	generic
		with procedure Traiter (Cle : in T_Cle; Donnee: in T_Donnee);
	procedure Pour_Chaque (T : in T_TH);


-- AVEC_AFFICHER_DEBUG START DELETE
	-- Afficher la Sda en révélant sa structure interne.
	--generic
		--with procedure Afficher_Cle (Cle : in T_Cle);
		--with procedure Afficher_Donnee (Donnee : in T_Donnee);
	--procedure Afficher_Debug (Sda : in T_LCA);


-- AVEC_AFFICHER_DEBUG STOP DELETE
private
    BORNE_MAX : constant Integer := 25;
    type T_Cellule;
    type T_TH is array(1..BORNE_MAX) of T_Donnee;
end TH;
