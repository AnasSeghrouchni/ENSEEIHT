Date de l'évaluation : mar. 29 mars 2022 10:47:34 CEST

Nombre de similitudes (voir evaluations/evaluation1/sim_java.txt) : 4
Les similitudes indiquent généralement du code à restructurer.

Erreurs checkstyle (différentes/types) : 63/15	(voir evaluations/evaluation1//checkstyle.log)

Classe OperationInterditeException : OperationInterditeException (ok)

Procuration sur le jeu réel : allumettes/JeuTriche.java (ok)

OperationInterditeException, levée dans : allumettes/JeuTriche.java (ok)
OperationInterditeException, récupérée dans : allumettes/Arbitre.java (ok)

Throwable, Exception et RuntimeException ne devraient pas être récupérées car trop générales... ok

AssertionError ne doit pas être récupérée... ok

Autres exceptions récupérées :
  | allumettes/Arbitre.java:68:             catch(CoupInvalideException s){
  | allumettes/StratHumaine.java:31:         catch(CoupInvalideException s) {
  | allumettes/StratHumaine.java:34:         catch(NumberFormatException s) {
  | allumettes/StratTricheuse.java:11:      catch(CoupInvalideException e) {
  | allumettes/Jouer.java:57:       } catch (ConfigurationException e) {

Utilisation de 'Scanner' : ok
  | allumettes/StratHumaine.java:7: static Scanner prendre;
  | allumettes/StratHumaine.java:11:        this.prendre= new Scanner(System.in);

Utilisation de 'split' : ok mais un seul split devrait suffir !  Code à restructurer...
  | allumettes/Jouer.java:39:           if(args[debut].split("@").length != 2 || args[debut+1].split("@").length != 2) {
  | allumettes/Jouer.java:43:           String[] p1=args[debut].split("@");
  | allumettes/Jouer.java:47:           String[] p2=args[debut+1].split("@");

Utilisation de 'Random' : ok
  | allumettes/StratNaive.java:2:import java.util.Random;
  | allumettes/StratNaive.java:6:   private Random alatoire;
  | allumettes/StratNaive.java:9:       this.alatoire=new Random();

Utilisation de '3' : ok

Affichage de 'Impossible !' : ok

Utilisation de 'System.exit' : ok

Compilation de Jouer.java : OK.
Compilation de Arbitre.java : OK.
Test exemplePresqueSujet : ok
Test exempleTricheurSujet : ok
Test exempleConfiantTricheurSujet : ok
Test exempleRobustesse : NON CONFORME (voir evaluations/evaluation1/exempleRobustesse.diff)
Test exempleHumainTricheurExpert : ok
Test exempleMaxLou : NON CONFORME (voir evaluations/evaluation1/exempleMaxLou.diff)
Test exempleRapideRapide : ok
Test exempleTricheurExpert : ok

Test RobustesseTest : OK (25 tests)	(voir evaluations/evaluation1/RobustesseTest.log)

On recommence avec les classes/interfaces fournies : Jeu ConfigurationException CoupInvalideException
Compilation de Jouer.java : OK.
Compilation de Arbitre.java : OK.

Vérification du respect du diagramme de classe...
Test FormeTest : OK (2 tests)	(voir evaluations/evaluation1/FormeTest.log)

Aucune classe de test (fichier *Test.java ou Test*.java) !
