import java.awt.Color;

/**On définit un cercle par son centre, son rayon, son diametre
 *  et sa couleur.
 * @author Anas Seghrouchni
 */
public class Cercle implements Mesurable2D {
	
	/** Le centre du cercle */
	private Point centre;
	
	/** Le rayon du cercle */
	private double rayon;
	
	/** La couleur du cercle */
	private Color couleur;
	
	public static final double PI = Math.PI;
		
	/**Construire un cercle un partir de son centre et de son rayon.
	 * 
	 * @param centre le centre
	 * @param rayon le rayon
	 */
	public Cercle(Point centre, double rayon) {
		assert rayon>0.0;
		assert centre!=null;
		this.centre = new Point(centre.getX(), centre.getY());
		this.rayon = rayon;
		this.couleur= Color.blue;
	}
	
	/** Construire un cercle à l'aide de 2 points diametralement opposés et d'une couleur.
	 * 
	 * @param A 1er point
	 * @param B 2eme point
	 * @param c couleur du cercle
	 */
	public Cercle(Point A, Point B, Color c) {
		assert A!=null;
		assert B!=null;
		assert c!=null;
		assert A.distance(B)!=0.0;
		double xc = (A.getX()+B.getX())/2;
		double yc = (A.getY()+B.getY())/2;
		this.centre = new Point(xc,yc);
		this.rayon=A.distance(B)/2;
		this.couleur= c;
	}
	
	/**  Construire un cercle à l'aide de 2 points diametralement opposés et d'une couleur.
	 * 
	 * @param A 1ere point
	 * @param B 2eme point
	 */
	public Cercle(Point A, Point B) {
		this(A,B,Color.blue);
	}
	
	/** Méthode de classe constuisant un cercle à partir de son centre et d'un point sur le cercle.
	 * 
	 * @param C centre du cercle
	 * @param B point sur le cercle
	 * @return poignée du nouveau cercle
	 */
	public static Cercle creerCercle(Point C, Point B) {
		assert C!=null;
		assert B!=null;
		assert C.distance(B)!=0.0;
		return new Cercle(C,C.distance(B));
	}
	
	/** Translater le cercle.
	* @param dx déplacement suivant l'axe des X
	* @param dy déplacement suivant l'axe des Y
	*/
	public void translater(double dx, double dy) {
		this.centre.translater(dx,dy);
	}
	
	/** Obtenir le centre du cercle.
	 * @return centre du cercle
	 */
	public Point getCentre() {
		return new Point(this.centre.getX(),this.centre.getY());
	}
	
	/** Obtenir le rayon du cercle.
	 * @return rayon du cercle
	 */
	public double getRayon() {
		return this.rayon;
	}
	
	/** Obtenir le diametre du cercle.
	 * @return le diametre du cercle.
	 */
	public double getDiametre(){
		return 2*this.rayon;
	}
	
	/** Savoir si un point est contenu dans un cercle.
	 * 
	 * @param A le point à considerer
	 * @return boolean indicant si le point est contenu
	 */
	public boolean contient(Point A) {
		assert A!=null;
		return (this.centre.distance(A)<=this.rayon);
	}
	
	/** Obtenir l'aire d'un cercle.
	 * 
	 * @return aire du cercle
	 */
	public double aire() {
		return PI*this.rayon*this.rayon;
	}
	
	/** Obtenir le périmetre d'un cercle.
	 * 
	 * @return périmetre du cercle.
	 */
	public double perimetre() {
		return 2*PI*this.rayon;
	}
	
	/** Obtenir la couleur d'un cerlce.
	 * 
	 * @return couleur du cercle
	 */
	public Color getCouleur() {
		return this.couleur;
	}
	
	/** Changer la couleur du cercle.
	 * 
	 * @param c nouvelle couleur
	 */
	public void setCouleur(Color c) {
		assert c!= null;
		this.couleur = c;
	}
	
	public String toString() {
		return "C" + this.rayon + "@" + this.centre.toString() ;
	}
	
	/** Changer le rayon du cercle.
	 * 
	 * @param r nouveau rayon
	 */
	public void setRayon(double r) {
		assert r>0.0;
		this.rayon= r;
	}
	
	/** Changer le diametre du cercle.
	 * 
	 * @param d nouveau diametre
	 */
	public void setDiametre(double d) {
		assert d>0.0;
		this.rayon=d/2;
	}
	

	


	
}